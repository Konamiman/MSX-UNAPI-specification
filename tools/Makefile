### Makefile for the UNAPI tools programs

## This makefile pretty much assumes that Linux is the underlying OS.
## If you use Windows (10+) the recommended approach is to setup WSL
## (https://learn.microsoft.com/en-us/windows/wsl/install), setup SDCC
## and optionally Nestor80 in Linux, and then run "wsl make".

## To convert .ihx files to binary files the objcopy tool is used, it's part
## of the GNU binary utils package (install in Ubuntu: sudo apt-get binutils)


# Disable default make stuff that we don't need

MAKEFLAGS += --no-builtin-rules
.SUFFIXES:


# Parse input (if any) and define constants and macros

libroot = ../lib/konamiman-sdcc/src
asm = $(libroot)/asm
crt0 = $(libroot)/crt0
char = $(libroot)/char

ifeq (,$(wildcard $(crt0)/crt0_msxdos.asm))
$(error External library files are missing from $(libroot). Run this: git submodule update --init --recursive)
endif

asm_c_rels = DosCall.rel UnapiGetCount.rel UnapiBuildCodeBlock.rel UnapiCall.rel UnapiRead.rel UnapiGetRamHelper.rel

ifeq ($(strip $(N80)),)
N80=N80
endif

export N80_ARGS= --no-show-banner --verbosity 0 --output-file-case lower --accept-dot-prefix

define assemble
	@printf "\n\033[0;36mAssembling %s\033[0m\n\n" $(1)
	$(call assemble_core, $(1), $(2))
endef

define assemble_core
	@$(N80) $(1) $(2)
endef

all: apilist ramhelper msr tcpip eth

TOOLS := $(N80) objcopy sdcc

.phony: prerequisites

prerequisites:
	@mkdir -p bin
	$(foreach exec,$(TOOLS),\
        $(if $(shell which $(exec)),,$(error "ERROR: can't execute $(exec), is it installed/in PATH?")))

-include prerequisites


# These are the programs generated

apilist: bin/apilist.com

ramhelper: bin/ramhelpr.com

msr: bin/msr.com

tcpip: bin/tcpip.com

eth: bin/eth.com


# Rules for the main programs

bin/apilist.com: apilist.asm
	$(call assemble,apilist.asm,bin/apilist.com)

bin/ramhelpr.com: ramhelpr.asm
	$(call assemble,ramhelpr.asm,bin/ramhelpr.com --define-symbols INSTALL_MSR=0)

bin/msr.com: ramhelpr.asm
	$(call assemble,ramhelpr.asm,bin/msr.com --define-symbols INSTALL_MSR=1)

bin/eth.com bin/tcpip.com: $(subst bin/,,$(patsubst %.rel,%.c,$@)) $(asm)/asm.h crt0_msxdos.rel printf_simple.rel putchar_msxdos.rel asm_call.rel $(asm_c_rels)
	@printf "\n\033[0;36mCompiling %s\033[0m\n\n" $@
	@sdcc --code-loc 0x180 --data-loc 0 -mz80 --disable-warning 196 --no-std-crt0 crt0_msxdos.rel printf_simple.rel putchar_msxdos.rel asm_call.rel $(asm_c_rels) $(subst bin/,,$(patsubst %.com,%.c,$@))
	@objcopy -I ihex -O binary $(subst bin/,,$(patsubst %.com,%.ihx,$@)) $@


# Rules for the dependencies

crt0_msxdos.rel: $(crt0)/crt0_msxdos.asm
	$(call assemble,$(crt0)/crt0_msxdos.asm,--build-type sdcc --discard-hash-prefix)

printf_simple.rel: $(char)/printf_simple.c
	@printf "\n\033[0;36mCompiling %s\033[0m\n\n" $@
	@sdcc -mz80 -c --max-allocs-per-node 10000 --allow-unsafe-read --opt-code-size $(char)/printf_simple.c

putchar_msxdos.rel: $(char)/putchar_msxdos.asm
	$(call assemble,$(char)/putchar_msxdos.asm,--build-type sdcc --discard-hash-prefix)

asm_call.rel: $(asm)/asm_call.asm
	$(call assemble,$(asm)/asm_call.asm,--build-type sdcc --discard-hash-prefix)

$(asm_c_rels): $(asm)/$(patsubst %.rel,%.c,$@)
	@printf "\n\033[0;36mCompiling %s\033[0m\n\n" $@
	@sdcc -mz80 -c --max-allocs-per-node 10000 --allow-unsafe-read --opt-code-size $(asm)/$(patsubst %.rel,%.c,$@)

.PHONY: clean


# Cleanup (deletes all the files generated by the build process)

clean:
	for ext in com bin rel sym ihx lk lst map noi; do find . -maxdepth 1 -type f -name "*.$$ext" -delete; done
	rm eth.asm
	rm tcpip.asm
	rm DosCall.asm
	rm Unapi*.asm
	rm printf*.asm
